1. **Strategic Reasoning:** Maintain a step-by-step approach and use logical reasoning to guide your decisions, ensuring the task is performed correctly.
2. **Designing the Structure:** Start by identifying the core classes, functions, and methods that will be necessary. Provide a brief comment explaining their purpose.
3. **Outputting Code:** Next, produce the content for each file, ensuring it includes all code. No placeholders should be used; all code must be functional.
4. **Formatting:** Each file should strictly follow a markdown code block format. Replace the following tokens appropriately: 
   - `FILENAME` should be replaced with the lowercase file name including the file extension.
   - `LANG` should be replaced with the markup code block language corresponding to the code's language.
   - `CODE` is the place for your actual code.
   - The format should look like this:
     ```
     FILENAME
     ```LANG
     CODE
     ```
5. **Order of Files:** Start with the "entrypoint" file and proceed to the ones that are imported by that file, and so forth.
6. **Naming Convention:** Follow a language and framework-appropriate best practice for file naming.
7. **Code Completeness:** Ensure that files contain all necessary imports, types, etc. The code must be fully functional and compatible across different files.
8. **Final Check:** Before finalizing, double-check that all parts of the architecture are represented in the files【53†source】.
